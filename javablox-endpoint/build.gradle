plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.rbxapi'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    implementation 'io.github.rbxapi:javablox-api:1.0-SNAPSHOT'
    testImplementation project(':javablox-api')
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

compileJava {
    //inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'io.github.rbxapi.javablox.api'
        ]
        classpath = files()
    }
}

compileTestJava {
    //inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'io.github.rbxapi.javablox.api',
                '--add-modules', 'org.junit.jupiter.api',
                '--add-reads', "$moduleName=org.junit.jupiter.api",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

javadoc {
    //inputs.property("moduleName", moduleName)
    doFirst {
        exclude "**/module-info.java"
        options.addStringOption('-module-path', classpath.asPath)
        options.addStringOption('-add-modules', 'io.github.rbxapi.javablox.api')
        options.addStringOption('-class-path', "")
        options.addBooleanOption('html5', true)
        options.addBooleanOption('verbose', true)
    }
}

test {
    useJUnitPlatform()

    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'io.github.rbxapi.javablox.api'
        ]
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'javablox-endpoint'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Javablox Endpoint'
                description = 'Implementation of raw IO for Javablox'
                url = 'https://github.com/rbxapi/javablox'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/RbxAPI/Javablox/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'ChingDim'
                        name = 'ChingDim'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/RbxAPI/Javablox.git'
                    developerConnection = 'scm:git:ssh://github.com/RbxAPI/Javablox.git'
                    url = 'http://github.com/RbxAPI/Javablox/'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencies {
    implementation project(':javablox-api')
}

// Don't add wrapper because it is included in Javablox
