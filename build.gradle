plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.rbxapi'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.11
def globalgradleVersion = '5.4.1'

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

subprojects {
    wrapper{
        gradleVersion = globalgradleVersion
        distributionType = Wrapper.DistributionType.BIN
    }
    afterEvaluate {
        repositories {
            mavenCentral()
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'org.junit.jupiter.api',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
            useJUnitPlatform()
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
        javadoc {
            options.addBooleanOption('html5', true)
            options.addStringOption('-module-path', classpath.asPath)
            options.tags = [ "implNote" ]
        }
    }
}

wrapper{
    gradleVersion = globalgradleVersion
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'javablox'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Javablox'
                description = 'Complete artifact for Javablox'
                url = 'https://github.com/rbxapi/javablox'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/RbxAPI/Javablox/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'ChingDim'
                        name = 'ChingDim'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/RbxAPI/Javablox.git'
                    developerConnection = 'scm:git:ssh://github.com/RbxAPI/Javablox.git'
                    url = 'http://github.com/RbxAPI/Javablox/'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('-module-path', classpath.asPath)
    options.tags = [ "implNote" ]
}